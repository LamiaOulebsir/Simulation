---
title: "Manip Donnée Manquante"
format: pdf
editor: visual
---

## Methode des cas complets

```{r}
# 1. Paramètres généraux
n <- 100           # Nombre d'observations
n_sim <- 500       # Nombre de simulations

# Moyennes théoriques
moy_theo_X1 <- 1
moy_theo_B1 <- 1
moy_theo_X2 <- 1

# Initialisation des sommes
somme_X1_complet <- 0
somme_B1_complet <- 0
somme_X2_complet <- 0

# Simulation CAS COMPLETS
for (i in 1:n_sim) {
  set.seed(i)

  # Génération des données complètes
  B1 <- rbinom(n, 1, 0.5)
  B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5)
  X2 <- rnorm(n, 1, 0.5)
  data <- data.frame(X1 = X1, X2 = X2, B1 = B1, B2 = B2)

  # MCAR
  data_mcar <- data
  data_mcar$X1[sample(1:n, 0.1 * n)] <- NA
  somme_X1_complet <- somme_X1_complet + mean(data_mcar$X1[!is.na(data_mcar$X1)])

  # MAR 
  data_mar <- data
  data_mar$B1[data_mar$B2 == 0 & data_mar$X1 < 0] <- NA
  somme_B1_complet <- somme_B1_complet + mean(data_mar$B1[!is.na(data_mar$B1)])

  # MNAR
  data_mnar <- data
  data_mnar$X2[data_mnar$X1 < 0.5 & data_mnar$X2 < 1.1 & data_mnar$B1 == 1] <- NA
  somme_X2_complet <- somme_X2_complet + mean(data_mnar$X2[!is.na(data_mnar$X2)])
}

# Moyennes finales cas complets
moy_X1_complet <- somme_X1_complet / n_sim
moy_B1_complet <- somme_B1_complet / n_sim
moy_X2_complet <- somme_X2_complet / n_sim

# Calcul des biais
biais_X1_complet <- moy_X1_complet - moy_theo_X1
biais_B1_complet <- moy_B1_complet - moy_theo_B1
biais_X2_complet <- moy_X2_complet - moy_theo_X2
```

# Methode d'imputation

## Imputation par moyenne

```{r}
# Initialisation des sommes
somme_X1_moyenne <- 0
somme_B1_moyenne <- 0
somme_X2_moyenne <- 0

# Simulation IMPUTATION PAR MOYENNE
for (i in 1:n_sim) {
  set.seed(i)

  # Génération des données complètes à chaque itération
  B1 <- rbinom(n, 1, 0.5)
  B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5)
  X2 <- rnorm(n, 1, 0.5)
  data <- data.frame(X1, X2, B1, B2)

  # MCAR
  data_mcar <- data
  data_mcar$X1[sample(1:n, 0.1 * n)] <- NA
  data_mcar$X1[is.na(data_mcar$X1)] <- mean(data_mcar$X1, na.rm = TRUE)
  somme_X1_moyenne <- somme_X1_moyenne + mean(data_mcar$X1)

  # MAR
  data_mar <- data
  data_mar$B1[data_mar$B2 == 0 & data_mar$X1 < 0] <- NA
  data_mar$B1[is.na(data_mar$B1)] <- mean(data_mar$B1, na.rm = TRUE)
  somme_B1_moyenne <- somme_B1_moyenne + mean(data_mar$B1)

  # MNAR
  data_mnar <- data
  data_mnar$X2[data_mnar$X1 < 0.5 & data_mnar$X2 < 1.1 & data_mnar$B1 == 1] <- NA
  data_mnar$X2[is.na(data_mnar$X2)] <- mean(data_mnar$X2, na.rm = TRUE)
  somme_X2_moyenne <- somme_X2_moyenne + mean(data_mnar$X2)
}

# Moyennes finales après imputation
moy_X1_moyenne <- somme_X1_moyenne / n_sim
moy_B1_moyenne <- somme_B1_moyenne / n_sim
moy_X2_moyenne <- somme_X2_moyenne / n_sim

# Calcul des biais
biais_X1_moyenne <- moy_X1_moyenne - moy_theo_X1
biais_B1_moyenne <- moy_B1_moyenne - moy_theo_B1
biais_X2_moyenne <- moy_X2_moyenne - moy_theo_X2
```

## Imputation par mediane

```{r}
# Initialisation des sommes
somme_X1_mediane <- 0
somme_B1_mediane <- 0
somme_X2_mediane <- 0

# Simulation IMPUTATION PAR MÉDIANE
for (i in 1:n_sim) {
  set.seed(i)

  # Génération des données complètes à chaque itération
  B1 <- rbinom(n, 1, 0.5)
  B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5)
  X2 <- rnorm(n, 1, 0.5)
  data <- data.frame(X1 = X1, X2 = X2, B1 = B1, B2 = B2)

  # MCAR
  data_mcar <- data
  data_mcar$X1[sample(1:n, 0.1 * n)] <- NA
  data_mcar$X1[is.na(data_mcar$X1)] <- median(data_mcar$X1, na.rm = TRUE)
  somme_X1_mediane <- somme_X1_mediane + mean(data_mcar$X1)

  # MAR
  data_mar <- data
  data_mar$B1[data_mar$B2 == 0 & data_mar$X1 < 0] <- NA
  data_mar$B1[is.na(data_mar$B1)] <- median(data_mar$B1, na.rm = TRUE)
  somme_B1_mediane <- somme_B1_mediane + mean(data_mar$B1)

  # MNAR
  data_mnar <- data
  data_mnar$X2[data_mnar$X1 < 0.5 & data_mnar$X2 < 1.1 & data_mnar$B1 == 1] <- NA
  data_mnar$X2[is.na(data_mnar$X2)] <- median(data_mnar$X2, na.rm = TRUE)
  somme_X2_mediane <- somme_X2_mediane + mean(data_mnar$X2)
}

# Moyennes finales après imputation par la médiane
moy_X1_mediane <- somme_X1_mediane / n_sim
moy_B1_mediane <- somme_B1_mediane / n_sim
moy_X2_mediane <- somme_X2_mediane / n_sim

# Calcul des biais
biais_X1_mediane <- moy_X1_mediane - moy_theo_X1
biais_B1_mediane <- moy_B1_mediane - moy_theo_B1
biais_X2_mediane <- moy_X2_mediane - moy_theo_X2
```

## Methode de pondération

```{r}
# Initialisation de la somme pondérée
somme_X1_pondere <- 0

# Simulation PONDÉRATION pour MCAR (X1)
for (i in 1:n_sim) {
  set.seed(i)

X1 <- rnorm(n, 1, 0.5)
data_pond <- data.frame(X1 = X1)

# Suppression aléatoire de 10% des valeurs (MCAR)
data_pond$X1[sample(1:n, 0.1 * n)] <- NA

# Moyenne pondérée avec poids = 1/0.9 pour les valeurs non manquantes
mean_pond <- weighted.mean(data_pond$X1, w = ifelse(is.na(data_pond$X1), 0, 1 / 0.9))

somme_X1_pondere <- somme_X1_pondere + mean_pond
}

# Moyenne finale pondérée
moy_X1_pondere <- somme_X1_pondere / n_sim

# Calcul du biais
biais_X1_pondere <- moy_X1_pondere - moy_theo_X1
```

## Les biais obtenus pour chaque méthode

```{r}
cat("METHODE DES CAS COMPLETS\n")
cat("Le biais MCAR (X1) est :", biais_X1_complet, "\n")
cat("Le biais MAR  (B1) est :", biais_B1_complet, "\n")
cat("Le biais MNAR (X2) est :", biais_X2_complet, "\n")

cat("METHODE D'IMPUTATION\n")
cat("Imputation par moyenne\n")
cat("Le biais MCAR (X1) est :", biais_X1_moyenne, "\n")
cat("Le biais MAR  (B1) est :", biais_B1_moyenne, "\n")
cat("Le biais MNAR (X2) est :", biais_X2_moyenne, "\n")

cat("Imputation par médiane\n")
cat("Le biais MCAR (X1) est :", biais_X1_mediane, "\n")
cat("Le biais MAR  (B1) est :", biais_B1_mediane, "\n")
cat("Le biais MNAR (X2) est :", biais_X2_mediane, "\n")

cat("METHODE DE PONDERATION\n")
cat("Le biais MCAR (X1) est :", biais_X1_pondere, "\n")
```

## Estimation : moyenne, médiane et la variance selon le mécanisme de données manquantes

```{r}
# Valeurs théoriques de référence pour comparaison (moyenne, médiane, variance)
val_moy <- 1
val_med <- 1
val_var <- 0.25

# METHODE DES CAS COMPLETS
# Initialisation des sommes pour les moyennes, médianes et variances (X1, B1, X2)
somme_moy_X1 <- 0; somme_med_X1 <- 0; somme_var_X1 <- 0
somme_moy_B1 <- 0; somme_med_B1 <- 0; somme_var_B1 <- 0
somme_moy_X2 <- 0; somme_med_X2 <- 0; somme_var_X2 <- 0

# Création des vecteurs pour stocker les résultats de chaque simulation pour les 3 mécanismes de données manquantes
vect_moy_X1 <- numeric(n_sim)
vect_med_X1 <- numeric(n_sim)
vect_var_X1 <- numeric(n_sim) 
vect_moy_B1 <- numeric(n_sim)
vect_med_B1 <- numeric(n_sim)
vect_var_B1 <- numeric(n_sim) 
vect_moy_X2 <- numeric(n_sim)
vect_med_X2 <- numeric(n_sim)
vect_var_X2 <- numeric(n_sim)  

# Boucle de simulation 
for (i in 1:n_sim) {
  set.seed(i) 
  B1 <- rbinom(n, 1, 0.5); B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5); X2 <- rnorm(n, 1, 0.5)    
  data <- data.frame(X1, X2, B1, B2)    # Création du dataframe

  # MCAR : suppression aléatoire de 10% des valeurs de X1
  data_mcar <- data
  data_mcar$X1[sample(1:n, 0.1 * n)] <- NA
  vect_moy_X1[i] <- mean(data_mcar$X1, na.rm = TRUE)
  vect_med_X1[i] <- median(data_mcar$X1, na.rm = TRUE)
  vect_var_X1[i] <- var(data_mcar$X1, na.rm = TRUE)
  somme_moy_X1 <- somme_moy_X1 + vect_moy_X1[i]
  somme_med_X1 <- somme_med_X1 + vect_med_X1[i]
  somme_var_X1 <- somme_var_X1 + vect_var_X1[i]

  # MAR : données manquantes dans B1 dépendent de B2 et X1
  data_mar <- data
  data_mar$B1[data_mar$B2 == 0 & data_mar$X1 < 0] <- NA
  vect_moy_B1[i] <- mean(data_mar$B1, na.rm = TRUE)
  vect_med_B1[i] <- median(data_mar$B1, na.rm = TRUE)
  vect_var_B1[i] <- var(data_mar$B1, na.rm = TRUE)
  somme_moy_B1 <- somme_moy_B1 + vect_moy_B1[i]
  somme_med_B1 <- somme_med_B1 + vect_med_B1[i]
  somme_var_B1 <- somme_var_B1 + vect_var_B1[i]

  # MNAR : suppression conditionnelle sur X2
  data_mnar <- data
  data_mnar$X2[data_mnar$X1 < 0.5 & data_mnar$X2 < 1.1 & data_mnar$B1 == 1] <- NA
  vect_moy_X2[i] <- mean(data_mnar$X2, na.rm = TRUE)
  vect_med_X2[i] <- median(data_mnar$X2, na.rm = TRUE)
  vect_var_X2[i] <- var(data_mnar$X2, na.rm = TRUE)
  somme_moy_X2 <- somme_moy_X2 + vect_moy_X2[i]
  somme_med_X2 <- somme_med_X2 + vect_med_X2[i]
  somme_var_X2 <- somme_var_X2 + vect_var_X2[i]
}

# Calcul des statistiques globales (moyenne, médiane, variance) 
moy_X1 <- somme_moy_X1 / n_sim
med_X1 <- somme_med_X1 / n_sim
var_X1 <- somme_var_X1 / n_sim
moy_B1 <- somme_moy_B1 / n_sim
med_B1 <- somme_med_B1 / n_sim;
var_B1 <- somme_var_B1 / n_sim
moy_X2 <- somme_moy_X2 / n_sim
med_X2 <- somme_med_X2 / n_sim
var_X2 <- somme_var_X2 / n_sim

# Calcul des biais
biais_moy_X1 <- moy_X1 - val_moy
biais_med_X1 <- med_X1 - val_med
biais_var_X1 <- var_X1 - val_var
biais_moy_B1 <- moy_B1 - val_moy
biais_med_B1 <- med_B1 - val_med
biais_var_B1 <- var_B1 - val_var
biais_moy_X2 <- moy_X2 - val_moy
biais_med_X2 <- med_X2 - val_med
biais_var_X2 <- var_X2 - val_var

# Écarts-types des estimateurs sur toutes les simulations
ecart_type_moy_X1 <- sd(vect_moy_X1)
ecart_type_med_X1 <- sd(vect_med_X1)
ecart_type_var_X1 <- sd(vect_var_X1)
ecart_type_moy_B1 <- sd(vect_moy_B1)
ecart_type_med_B1 <- sd(vect_med_B1)
ecart_type_var_B1 <- sd(vect_var_B1)
ecart_type_moy_X2 <- sd(vect_moy_X2)
ecart_type_med_X2 <- sd(vect_med_X2)
ecart_type_var_X2 <- sd(vect_var_X2)

# IMPUTATION PAR LA MOYEN
# Initialisation des sommes pour stocker les résultats 
s_moy_X1_mean <- 0; s_med_X1_mean <- 0; s_var_X1_mean <- 0
s_moy_B1_mean <- 0; s_med_B1_mean <- 0; s_var_B1_mean <- 0
s_moy_X2_mean <- 0; s_med_X2_mean <- 0; s_var_X2_mean <- 0

# Vecteurs pour stocker les résultats individuels par simulation
vect_moy_X1_mean <- numeric(n_sim)
vect_med_X1_mean <- numeric(n_sim)
vect_var_X1_mean <- numeric(n_sim)
vect_moy_B1_mean <- numeric(n_sim)
vect_med_B1_mean <- numeric(n_sim)
vect_var_B1_mean <- numeric(n_sim)
vect_moy_X2_mean <- numeric(n_sim)
vect_med_X2_mean <- numeric(n_sim)
vect_var_X2_mean <- numeric(n_sim)

# Boucle d’imputation par la moyenne sur chaque variable
for (i in 1:n_sim) {
  set.seed(i)
  B1 <- rbinom(n, 1, 0.5); B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5); X2 <- rnorm(n, 1, 0.5)
  data <- data.frame(X1, X2, B1, B2)

  # MCAR : Imputation moyenne sur X1
  data$X1[sample(1:n, 0.1 * n)] <- NA
  data$X1[is.na(data$X1)] <- mean(data$X1, na.rm = TRUE)
  valX1 <- data$X1
  vect_moy_X1_mean[i] <- mean(valX1)
  vect_med_X1_mean[i] <- median(valX1)
  vect_var_X1_mean[i] <- var(valX1)
  s_moy_X1_mean <- s_moy_X1_mean + vect_moy_X1_mean[i]
  s_med_X1_mean <- s_med_X1_mean + vect_med_X1_mean[i]
  s_var_X1_mean <- s_var_X1_mean + vect_var_X1_mean[i]

  # MAR : Imputation moyenne sur B1
  data$B1[data$B2 == 0 & data$X1 < 0] <- NA
  data$B1[is.na(data$B1)] <- mean(data$B1, na.rm = TRUE)
  valB1 <- data$B1
  vect_moy_B1_mean[i] <- mean(valB1)
  vect_med_B1_mean[i] <- median(valB1)
  vect_var_B1_mean[i] <- var(valB1)
  s_moy_B1_mean <- s_moy_B1_mean + vect_moy_B1_mean[i]
  s_med_B1_mean <- s_med_B1_mean + vect_med_B1_mean[i]
  s_var_B1_mean <- s_var_B1_mean + vect_var_B1_mean[i]

  # MNAR : Imputation moyenne sur X2
  data$X2[data$X1 < 0.5 & data$X2 < 1.1 & data$B1 == 1] <- NA
  data$X2[is.na(data$X2)] <- mean(data$X2, na.rm = TRUE)
  valX2 <- data$X2
  vect_moy_X2_mean[i] <- mean(valX2)
  vect_med_X2_mean[i] <- median(valX2)
  vect_var_X2_mean[i] <- var(valX2)
  s_moy_X2_mean <- s_moy_X2_mean + vect_moy_X2_mean[i]
  s_med_X2_mean <- s_med_X2_mean + vect_med_X2_mean[i]
  s_var_X2_mean <- s_var_X2_mean + vect_var_X2_mean[i]
}

# Calcul des biais suite à l’imputation par la moyenne
b_moy_X1_mean <- (s_moy_X1_mean / n_sim) - val_moy
b_med_X1_mean <- (s_med_X1_mean / n_sim) - val_med
b_var_X1_mean <- (s_var_X1_mean / n_sim) - val_var
b_moy_B1_mean <- (s_moy_B1_mean / n_sim) - val_moy
b_med_B1_mean <- (s_med_B1_mean / n_sim) - val_med
b_var_B1_mean <- (s_var_B1_mean / n_sim) - val_var
b_moy_X2_mean <- (s_moy_X2_mean / n_sim) - val_moy
b_med_X2_mean <- (s_med_X2_mean / n_sim) - val_med
b_var_X2_mean <- (s_var_X2_mean / n_sim) - val_var

# Écarts-types après imputation par la moyenne
ecart_type_moy_X1_mean <- sd(vect_moy_X1_mean)
ecart_type_med_X1_mean <- sd(vect_med_X1_mean)
ecart_type_var_X1_mean <- sd(vect_var_X1_mean)
ecart_type_moy_B1_mean <- sd(vect_moy_B1_mean)
ecart_type_med_B1_mean <- sd(vect_med_B1_mean)
ecart_type_var_B1_mean <- sd(vect_var_B1_mean)
ecart_type_moy_X2_mean <- sd(vect_moy_X2_mean)
ecart_type_med_X2_mean <- sd(vect_med_X2_mean)
ecart_type_var_X2_mean <- sd(vect_var_X2_mean)

# IMPUTATION PAR LA MEDIANE
# Initialisation des sommes
s_moy_X1_med <- 0; s_med_X1_med <- 0; s_var_X1_med <- 0
s_moy_B1_med <- 0; s_med_B1_med <- 0; s_var_B1_med <- 0
s_moy_X2_med <- 0; s_med_X2_med <- 0; s_var_X2_med <- 0

# Vecteurs pour stocker les résultats
vect_moy_X1_med <- numeric(n_sim)
vect_med_X1_med <- numeric(n_sim)
vect_var_X1_med <- numeric(n_sim)
vect_moy_B1_med <- numeric(n_sim)
vect_med_B1_med <- numeric(n_sim)
vect_var_B1_med <- numeric(n_sim)
vect_moy_X2_med <- numeric(n_sim)
vect_med_X2_med <- numeric(n_sim)
vect_var_X2_med <- numeric(n_sim)

# Boucle pour imputation par la médiane
for (i in 1:n_sim) {
  set.seed(i)
  B1 <- rbinom(n, 1, 0.5); B2 <- rbinom(n, 1, 0.5)
  X1 <- rnorm(n, 1, 0.5); X2 <- rnorm(n, 1, 0.5)
  data <- data.frame(X1, X2, B1, B2)

  data$X1[sample(1:n, 0.1 * n)] <- NA
  data$X1[is.na(data$X1)] <- median(data$X1, na.rm = TRUE)
  valX1 <- data$X1
  vect_moy_X1_med[i] <- mean(valX1)
  vect_med_X1_med[i] <- median(valX1)
  vect_var_X1_med[i] <- var(valX1)
  s_moy_X1_med <- s_moy_X1_med + vect_moy_X1_med[i]
  s_med_X1_med <- s_med_X1_med + vect_med_X1_med[i]
  s_var_X1_med <- s_var_X1_med + vect_var_X1_med[i]

  data$B1[data$B2 == 0 & data$X1 < 0] <- NA
  data$B1[is.na(data$B1)] <- median(data$B1, na.rm = TRUE)
  valB1 <- data$B1
  vect_moy_B1_med[i] <- mean(valB1)
  vect_med_B1_med[i] <- median(valB1)
  vect_var_B1_med[i] <- var(valB1)
  s_moy_B1_med <- s_moy_B1_med + vect_moy_B1_med[i]
  s_med_B1_med <- s_med_B1_med + vect_med_B1_med[i]
  s_var_B1_med <- s_var_B1_med + vect_var_B1_med[i]

  data$X2[data$X1 < 0.5 & data$X2 < 1.1 & data$B1 == 1] <- NA
  data$X2[is.na(data$X2)] <- median(data$X2, na.rm = TRUE)
  valX2 <- data$X2
  vect_moy_X2_med[i] <- mean(valX2)
  vect_med_X2_med[i] <- median(valX2)
  vect_var_X2_med[i] <- var(valX2)
  s_moy_X2_med <- s_moy_X2_med + vect_moy_X2_med[i]
  s_med_X2_med <- s_med_X2_med + vect_med_X2_med[i]
  s_var_X2_med <- s_var_X2_med + vect_var_X2_med[i]
}

# Calculs des biais pour l’imputation par la médiane
b_moy_X1_med <- (s_moy_X1_med / n_sim) - val_moy
b_med_X1_med <- (s_med_X1_med / n_sim) - val_med
b_var_X1_med <- (s_var_X1_med / n_sim) - val_var
b_moy_B1_med <- (s_moy_B1_med / n_sim) - val_moy
b_med_B1_med <- (s_med_B1_med / n_sim) - val_med
b_var_B1_med <- (s_var_B1_med / n_sim) - val_var
b_moy_X2_med <- (s_moy_X2_med / n_sim) - val_moy
b_med_X2_med <- (s_med_X2_med / n_sim) - val_med
b_var_X2_med <- (s_var_X2_med / n_sim) - val_var

# Écarts-types pour l’imputation par médiane
ecart_type_moy_X1_med <- sd(vect_moy_X1_med)
ecart_type_med_X1_med <- sd(vect_med_X1_med)
ecart_type_var_X1_med <- sd(vect_var_X1_med)
ecart_type_moy_B1_med <- sd(vect_moy_B1_med)
ecart_type_med_B1_med <- sd(vect_med_B1_med)
ecart_type_var_B1_med <- sd(vect_var_B1_med)
ecart_type_moy_X2_med <- sd(vect_moy_X2_med)
ecart_type_med_X2_med <- sd(vect_med_X2_med)
ecart_type_var_X2_med <- sd(vect_var_X2_med)

# PONDERATION (MCAR uniquement)
# Initialisation des sommes et vecteurs pour pondération
s_moy_X1_pond <- 0
vect_moy_X1_pond <- numeric(n_sim)
vect_moy_X1_pond <- numeric(n_sim)
vect_med_X1_pond <- numeric(n_sim)
vect_var_X1_pond <- numeric(n_sim)

# Boucle pour pondération inverse sur MCAR
for (i in 1:n_sim) {
  set.seed(i)
  X1 <- rnorm(n, 1, 0.5)
  missing <- sample(1:n, 0.1 * n)
  indices <- setdiff(1:n, missing)
  poids <- rep(1 / 0.9, length(indices))
  wm <- weighted.mean(X1[indices], poids)
  vect_moy_X1_pond[i] <- wm
  s_moy_X1_pond <- s_moy_X1_pond + wm
  vect_moy_X1_pond[i] <- wm
  vect_med_X1_pond[i] <- median(X1[indices])
  vect_var_X1_pond[i] <- var(X1[indices])
}

# Calculs finaux pour pondération
ecart_type_moy_X1_pond <- sd(vect_moy_X1_pond)  # Écart-type de la moyenne pondérée
ecart_type_med_X1_pond <- sd(vect_med_X1_pond)  # Écart-type de la médiane pondérée
ecart_type_var_X1_pond <- sd(vect_var_X1_pond)  # Écart-type de la variance pondérée
b_moy_X1_pond <- (s_moy_X1_pond / n_sim) - val_moy  # Calcul du biais de la moyenne pondérée (MCAR)
```

## Tableau récapitulatif des biais sur la moyenne, la médiane et la variance aprés estimation

```{r}
# TABLEAU FINAL DES BIAIS
tableau_biais <- data.frame(
  Methode = rep(c("Cas complets", "Imput. Moyenne", "Imput. Mediane", "Pondération"), each = 3),
  Mecanisme = rep(c("MCAR (X1)", "MAR (B1)", "MNAR (X2)"), times = 4),

  Biais_Moyenne = c(  # Biais sur les moyennes
    biais_moy_X1, biais_moy_B1, biais_moy_X2,
    b_moy_X1_mean, b_moy_B1_mean, b_moy_X2_mean,
    b_moy_X1_med, b_moy_B1_med, b_moy_X2_med,
    b_moy_X1_pond, NA, NA  # NA pour les mécanismes non traités par pondération
  ),

  Biais_Mediane = c(  # Biais sur les médianes
    biais_med_X1, biais_med_B1, biais_med_X2,
    b_med_X1_mean, b_med_B1_mean, b_med_X2_mean,
    b_med_X1_med, b_med_B1_med, b_med_X2_med,
    NA, NA, NA
  ),

  Biais_Variance = c(  # Biais sur les variances
    biais_var_X1, biais_var_B1, biais_var_X2,
    b_var_X1_mean, b_var_B1_mean, b_var_X2_mean,
    b_var_X1_med, b_var_B1_med, b_var_X2_med,
    NA, NA, NA
  )
)

# Affichage du tableau final de biais pour comparaison des méthodes
print(tableau_biais)
```

## Tableau des écart-types

```{r}
# TABLEAU RÉCAPITULATIF DES ÉCARTS-TYPES
# Création d’un tableau de données contenant les écarts-types pour 
# chaque méthode d’imputation et de mécanisme de données manquantes
tableau_ecarts_types <- data.frame(
  Methode = rep(c("Cas complets", "Imput. Moyenne", "Imput. Mediane", "Pondération"), each = 3),
Mecanisme = rep(c("MCAR (X1)", "MAR (B1)", "MNAR (X2)"), times = 4),

EcartType_Moyenne = c(  # Écarts-types des moyennes estimées
ecart_type_moy_X1, ecart_type_moy_B1, ecart_type_moy_X2,
ecart_type_moy_X1_mean, ecart_type_moy_B1_mean, ecart_type_moy_X2_mean, 
ecart_type_moy_X1_med, ecart_type_moy_B1_med, ecart_type_moy_X2_med, 
ecart_type_moy_X1_pond, NA, NA
  ),

EcartType_Mediane = c(  # Écarts-types des médianes estimées
ecart_type_med_X1, ecart_type_med_B1, ecart_type_med_X2,  
ecart_type_med_X1_mean, ecart_type_med_B1_mean, ecart_type_med_X2_mean, 
    ecart_type_med_X1_med, ecart_type_med_B1_med, ecart_type_med_X2_med,
    NA, NA, NA
  ),

EcartType_Variance = c(  # Écarts-types des variances estimées
ecart_type_var_X1, ecart_type_var_B1, ecart_type_var_X2,  
ecart_type_var_X1_mean, ecart_type_var_B1_mean, ecart_type_var_X2_mean,   
ecart_type_var_X1_med, ecart_type_var_B1_med, ecart_type_var_X2_med, 
    NA, NA, NA
  )
)

# Affichage du tableau récapitulatif des écarts-types dans la console
print(tableau_ecarts_types)
```

## Boxplot pour visualiser la variabilité des estimations

```{r}
library(ggplot2)
library(gridExtra)
# PRÉPARATION DES DONNÉES POUR LES BOXPLOTS

# Pour la variable X1 (MCAR) - Moyenne
df_X1_moy <- data.frame(
  Valeur = c(vect_moy_X1, vect_moy_X1_med, vect_moy_X1_mean, vect_moy_X1_pond),
  Statistique = "Moyenne",  # Type de statistique
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne", "Pondération"), each = n_sim))  # Méthode d’imputation
)

# Pour X1 - Médiane
df_X1_med <- data.frame(
  Valeur = c(vect_med_X1, vect_med_X1_med, vect_med_X1_mean, vect_med_X1_pond),
  Statistique = "Médiane",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne", "Pondération"), each = n_sim))
)

# Pour X1 - Variance
df_X1_var <- data.frame(
  Valeur = c(vect_var_X1, vect_var_X1_med, vect_var_X1_mean, vect_var_X1_pond),
  Statistique = "Variance",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne", "Pondération"), each = n_sim))
)

# Fusion des 3 sous-ensembles pour X1 en un seul tableau
df_X1 <- rbind(df_X1_moy, df_X1_med, df_X1_var)
df_X1$Variable <- "X1 (MCAR)"  # Ajout d'une colonne pour l’identification de la variable

# POUR B1 (MAR)
# Moyenne
df_B1_moy <- data.frame(
  Valeur = c(vect_moy_B1, vect_moy_B1_med, vect_moy_B1_mean),
  Statistique = "Moyenne",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Médiane
df_B1_med <- data.frame(
  Valeur = c(vect_med_B1, vect_med_B1_med, vect_med_B1_mean),
  Statistique = "Médiane",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Variance
df_B1_var <- data.frame(
  Valeur = c(vect_var_B1, vect_var_B1_med, vect_var_B1_mean),
  Statistique = "Variance",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Fusion des 3 sous-ensembles pour B1
df_B1 <- rbind(df_B1_moy, df_B1_med, df_B1_var)
df_B1$Variable <- "B1 (MAR)"  # Ajout de la colonne Variable

# POUR X2 (MNAR)
# Moyenne
df_X2_moy <- data.frame(
  Valeur = c(vect_moy_X2, vect_moy_X2_med, vect_moy_X2_mean),
  Statistique = "Moyenne",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Médiane
df_X2_med <- data.frame(
  Valeur = c(vect_med_X2, vect_med_X2_med, vect_med_X2_mean),
  Statistique = "Médiane",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Variance
df_X2_var <- data.frame(
  Valeur = c(vect_var_X2, vect_var_X2_med, vect_var_X2_mean),
  Statistique = "Variance",
  Methode = factor(rep(c("Cas complets", "Imput. Mediane", "Imput. Moyenne"), each = n_sim), levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))
)

# Fusion des 3 sous-ensembles pour X2
df_X2 <- rbind(df_X2_moy, df_X2_med, df_X2_var)
df_X2$Variable <- "X2 (MNAR)"  # Ajout de la colonne Variable

# FUSION DES DONNÉES POUR VISUALISATION
# Combinaison de tous les jeux de données (X1, B1, X2)
df_all <- rbind(df_X1, df_B1, df_X2)

# Création de sous-ensembles pour les graphes
df_X1_only <- subset(df_all, Variable == "X1 (MCAR)")  # Données uniquement pour X1
df_BX_only <- subset(df_all, Variable %in% c("B1 (MAR)", "X2 (MNAR)"))  # Données pour B1 et X2

# Ordre des méthodes dans les graphes
df_X1_only$Methode <- factor(df_X1_only$Methode, levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne", "Pondération"))
df_BX_only$Methode <- factor(df_BX_only$Methode, levels = c("Cas complets", "Imput. Mediane", "Imput. Moyenne"))

# GRAPHIQUE BOXPLOT POUR X1 (MCAR)
plot_X1 <- ggplot(df_X1_only, aes(x = Methode, y = Valeur, fill = Methode)) +
  geom_boxplot(outlier.size = 0.8) +  
  facet_grid(Statistique ~ Variable, scales = "free_y") +  
  labs(title = "X1 (MCAR)", y = "Valeur estimée", x = "Méthode") +  # Titres et axes
  theme_minimal() +  # Thème graphique 
  theme(axis.text.x = element_text(angle = 30, hjust = 1))  

# GRAPHIQUE BOXPLOT POUR B1 (MAR) ET X2 (MNAR)
plot_BX <- ggplot(df_BX_only, aes(x = Methode, y = Valeur, fill = Methode)) +
  geom_boxplot(outlier.size = 0.8) +
  facet_grid(Statistique ~ Variable, scales = "free_y") +
  labs(title = "B1 (MAR) & X2 (MNAR)", y = "Valeur estimée", x = "Méthode") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))

# AFFICHAGE DES DEUX GRAPHIQUES CÔTE À CÔTE
grid.arrange(plot_X1, plot_BX, ncol = 2)  
```
